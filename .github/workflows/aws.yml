name: Build and Deploy to ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # Ajusta según tu región
  ECR_REPOSITORY: users   # Nombre del repositorio en ECR
  ECS_SERVICE: Users                  # Nombre del servicio ECS
  ECS_CLUSTER: Credibanco                    # Nombre del clúster ECS
  ECS_TASK_DEFINITION: ecs-task-def.json     # Ruta al task definition en el repo
  CONTAINER_NAME: Users   # Nombre del contenedor en el task definition

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    # Si tus tests requieren MySQL, activa el servicio
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root123
          MYSQL_DATABASE: cards
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=testuser --password=testpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Dar permisos a gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      - name: Verificar archivos generados
        run: ls -R build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Se construye la imagen usando el Dockerfile y el JAR generado en build/libs
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render new Amazon ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
